import { useEffect, useState } from 'react';
import { useAppStore } from '../hooks';

export function ShoppingList() {
  const { 
    currentSchedule, 
    shoppingList, 
    loadShoppingList, 
    toggleShoppingListItem, 
    regenerateShoppingList,
    isOnline
  } = useAppStore();
  const [sharedLink, setSharedLink] = useState('');

  useEffect(() => {
    if (currentSchedule) {
      loadShoppingList();
    }
  }, [currentSchedule, loadShoppingList]);

  const handleToggleItem = async (itemId: string, isChecked: boolean) => {
    await toggleShoppingListItem(itemId, isChecked);
  };

  const handleRegenerateList = async () => {
    await regenerateShoppingList();
  };

  const handleShare = async () => {
    const shareData = {
      scheduleName: currentSchedule?.name || 'My Meal Plan',
      items: shoppingList.map(item => ({
        name: item.ingredient.name,
        quantity: item.totalQuantity,
        unit: item.ingredient.unit,
        recipes: item.recipes,
        isChecked: item.isChecked,
      })),
      generatedAt: new Date().toISOString(),
    };

    // In a real app, you'd send this to an API endpoint
    // For now, we'll create a shareable text format
    const shareText = generateShareableText(shareData);

    try {
      await navigator.clipboard.writeText(shareText);
      alert('Shopping list copied to clipboard!');
    } catch (err) {
      // Fallback for browsers that don't support clipboard API
      const blob = new Blob([shareText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      setSharedLink(url);
    }
  };

  const generateShareableText = (data: any) => {
    let text = `ðŸ›’ Shopping List: ${data.scheduleName}\n`;
    text += `Generated on: ${new Date(data.generatedAt).toLocaleDateString()}\n\n`;

    data.items.forEach((item: any) => {
      const checkmark = item.isChecked ? 'âœ…' : 'â¬œ';
      text += `${checkmark} ${item.quantity} ${item.unit} ${item.name}\n`;
      if (item.recipes.length > 0) {
        text += `  Used in: ${item.recipes.join(', ')}\n`;
      }
      text += '\n';
    });

    text += '\n---\nGenerated by Recipe Planner App';
    return text;
  };

  const downloadShoppingList = () => {
    const shareData = {
      scheduleName: currentSchedule?.name || 'My Meal Plan',
      items: shoppingList.map(item => ({
        name: item.ingredient.name,
        quantity: item.totalQuantity,
        unit: item.ingredient.unit,
        recipes: item.recipes,
        isChecked: item.isChecked,
      })),
      generatedAt: new Date().toISOString(),
    };

    const shareText = generateShareableText(shareData);
    const blob = new Blob([shareText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `shopping-list-${currentSchedule?.name || 'meal-plan'}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!currentSchedule) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-4">Shopping List</h2>
        <p className="text-gray-500">Create a weekly schedule first to generate a shopping list.</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-xl font-bold text-gray-800">Shopping List</h2>
          <p className="text-sm text-gray-600">For: {currentSchedule.name}</p>
        </div>
        <div className="flex items-center gap-2">
          {!isOnline && (
            <span className="text-sm text-orange-600 bg-orange-100 px-2 py-1 rounded">
              Offline Mode
            </span>
          )}
          <button
            onClick={handleRegenerateList}
            className="px-3 py-1 text-sm bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
          >
            ðŸ”„ Regenerate
          </button>
          <button
            onClick={handleShare}
            disabled={shoppingList.length === 0}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            ðŸ“‹ Copy to Clipboard
          </button>
          <button
            onClick={downloadShoppingList}
            disabled={shoppingList.length === 0}
            className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            ðŸ’¾ Download
          </button>
        </div>
      </div>

      {sharedLink && (
        <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-md">
          <p className="text-green-800 text-sm">
            Shopping list ready!
            <a
              href={sharedLink}
              download={`shopping-list-${currentSchedule.name}.txt`}
              className="ml-2 text-green-600 underline hover:text-green-800"
            >
              Click here to download
            </a>
          </p>
        </div>
      )}

      {shoppingList.length === 0 ? (
        <p className="text-gray-500 text-center py-8">
          No items in shopping list. Add some meals to your weekly schedule!
        </p>
      ) : (
        <div className="space-y-3">
          <div className="text-sm text-gray-600 mb-4">
            Total items: {shoppingList.length} | 
            Checked: {shoppingList.filter(item => item.isChecked).length}
          </div>

          {shoppingList.map((item) => (
            <div
              key={item.id}
              className={`flex items-start gap-3 p-4 rounded-lg transition-all ${
                item.isChecked 
                  ? 'bg-gray-100 opacity-75' 
                  : 'bg-gray-50'
              }`}
            >
              <input
                type="checkbox"
                checked={item.isChecked}
                onChange={(e) => handleToggleItem(item.id, e.target.checked)}
                className="mt-1 h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
              />
              <div className="flex-1">
                <div className={`flex items-baseline gap-2 ${item.isChecked ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                  <span className="font-medium">
                    {item.totalQuantity} {item.ingredient.unit} {item.ingredient.name}
                  </span>
                </div>
                {item.recipes.length > 0 && (
                  <div className="text-sm text-gray-600 mt-1">
                    Used in: {item.recipes.join(', ')}
                  </div>
                )}
              </div>
            </div>
          ))}

          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h3 className="font-medium text-blue-800 mb-2">ðŸ’¡ Pro Tips:</h3>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>â€¢ Check your pantry before shopping to avoid duplicates</li>
              <li>â€¢ Group items by store section for efficient shopping</li>
              <li>â€¢ Consider buying in bulk for frequently used ingredients</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
}
